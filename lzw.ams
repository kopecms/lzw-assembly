		.data

buffer:		.space 65000
buffer2:	.space 80000

output_length: 	.word 0
dict_size:	.word 255

file_name:	.asciiz "lol1.txt"
output_file: 	.asciiz "tutu.txt"

space:		.asciiz " "
newline:	.asciiz "\n"
znak:		.asciiz "--"
text0:		.asciiz "Program kompresujacy i dekompreujacy algorytmem lzw\n"


dict_addr:	.word 0			# adres slownika
dict_current:	.word 0			# adres elementu ostatniego badz uzywanego
iter_dict:	.word 0

a_id:		.word 0

iter_byte:	.byte 0			# zmienna do iteracji

word_from_dict: .word 0			# adres slowa ze slownika

ab:	.space 60			# zerzniete ze strony z algorytmem
a:	.space 60
b:	.byte 0

# stringi do testow
abc: 	.asciiz "a"
abcd:	.asciiz ""

		.text
		.globl main
		
main:		la $a0, text0		# wypisz jakis tekst powitalny
		li $v0, 4
		syscall			
		
open_file:	la $a0, file_name	# wczytaj nazwe pliku
		li $a1, 0		# otwieranie do czytania
		li $a2, 0 		# jakies flagi
		li $v0, 13		# tryb otwierania
		syscall
		move $s0, $v0		# zapisz uchwyt do pliku
		
read_file: 	move $a0, $s0		
		la $a1, buffer		
		li $a2, 65000		# dlugosc buffora
		li $v0, 14		# tryb czytania
		syscall
		move $t0, $v0		# zapisz liczbe wczytanych bajtow

build_dict:	li $a0, 8		# wszystko na razie hardcode
		li $v0, 9
		syscall
		sw $v0, dict_addr	# piewszy element slownika
		sw $v0, dict_current	# element ostani 
				
add_word_init:	lw $t0, iter_byte
		lw $t1, dict_current
		sb $t0, 4($t1)
		sb $0, 5($t1)		# ustawiamy zero na koncu wyrazu
		
		li $a0, 8		# alokujemy nowa pamiec
		li $v0, 9
		syscall
		sw $v0, 0($t1)		# zapisujemy adres kolejnej komorku
		sw $v0, dict_current
		
		addi $t0,$t0,1
		
		sb $t0, iter_byte	# zwiekszamy
		
		blt $t0, 255, add_word_init # az slownik bedzie mial rozmiar 255
	
		
				
		la $s5, buffer		# ladujemy adres buffora
		la $s7, buffer2		# adres buffora do ktorego bedzie zapisywanne
		
		j decompress
#####################################################################
#                            COMPRESS                               #
#####################################################################	
	
compress:	lb $s6, 0($s5)		# ladujemy znak
		sb $s6, b
		addi $s5, $s5, 1
		
		beqz $s6, out_of_loop		# jesli koniec pliku konczymy
				
add_byte:	la $t2,	ab
		la $t3, a
		lb $t5, b
		lb $t4, 0($t3)		#zaladuj pierwszy bajt
		
add_a:		beq $t4, 0, add_b 
		sb $t4, 0($t2)		# zapisz bajt z a w ab
		addi $t2, $t2 ,1	# przesuwamy sie po byforze ab
		addi $t3, $t3 ,1	# przesuwamy sie po buforze a
		lb $t4, 0($t3)		# zaladuj kolejny bajt z a
		bne $t4, 0, add_a 	# koniec stringa a	
		
add_b:		sb $t5, 0($t2) 		# dodaj b
		sb $0, 1($t2)		# dodaj zero na koniec
		
if_ab_in_dict:	la $s1, dict_addr	# ladujemy slownik
		lw $s1, 0($s1)
		sw $0, iter_dict
			
		
loop_1:		lw $t3, iter_dict
		addi $t3,$t3,1
		sw $t3, iter_dict
	
		la $a1, 4($s1)		# ladujemy string ze slownika do porownania z ab
		
comper_strings: la $t1, 4($s1)
	        la $t2, ab		# ladujemy stringi
		
		
equal:		lb $t3, 0($t1)
		lb $t4, 0($t2) 		# ladujemy po bicie
		
		addi $t1, $t1, 1
		addi $t2, $t2, 1 	# przesuwamy miejsce w pamieci
		beqz $t3, zero	
		beq $t3,$t4, equal
		
zero:		bnez $t4, not_equal	# seria szalonych warunkow
		li $v0, 1
		
		lw $t3, iter_dict
		sw $t3, a_id
	
		j jump
		
not_equal:	li $v0, 0
		
jump:
		bnez $v0 ,in_dict	# jezeli jeden to wracamy wyniki 
		
		lw $s1, 0($s1)
		beqz $s1, not_in_dict
		j loop_1
		
in_dict:  	la $t0, ab		# a = ab
		la $t1, a
		
loop_2:		lb $t2, 0($t0)
		sb $t2, 0($t1)	
		addi $t0,$t0,1
		addi $t1,$t1,1
		bnez $t2, loop_2	# a = ab end
		
		j compress
		
not_in_dict: 	lw $t3, a_id		# korekta jesli a bylo pojedynczym znakiem
		bge $t3, 256, ok
		lw $t3, a
		sw $t3, a_id
		
		
ok:		sw $t3, ($s7)		# kompresje zapisujemy	
		addi $s7,$s7,4
		lw $t7, output_length
		addi $t7, $t7, 4
		sw $t7, output_length
		
		lw $a0,	a_id
		li $v0, 1
		syscall
		
		la $a0,	space 
		li $v0, 4
		syscall
		
add_word:	lw $t5, dict_current	#ladujemy aktualnie ostatnia komorke

		la $t0, ab	
		la $t1, 4($t5)			
loop_3:		lb $t2, 0($t0)
		sb $t2, 0($t1)
		
		addi $t0,$t0,1
		addi $t1,$t1,1
		bnez $t2, loop_3
				
		li $a0, 60		# alokujemy nowa pamiec na 60 bajtow a tak se moze starczy
		li $v0, 9
		syscall
		sw $v0, 0($t5)		# zapisujemy adres kolejnej komorku
		sw $v0, dict_current
		
hophop:		lb $t0, b
		la $t1, a
		sb $t0, 0($t1)
		sb $0, 1($t1)
		j compress
		
out_of_loop:	la $t3, a_id
		beqz $t3, file_open
		
		sw $t3, ($s7)		# kompresje zapisujemy		
		addi $s7,$s7,4
		lw $t7, output_length	# za duzo?????
		addi $t7, $t7, 4
		#sw $t7, output_length
file_open:
    		li $v0, 13
   	 	la $a0, output_file
	    	li $a1, 1
 	        li $a2, 0
                syscall  # File descriptor gets returned in $v0
file_write:
                move $a0, $v0  # Syscall 15 requieres file descriptor in $a0
     	        li $v0, 15
    		la $a1, buffer2
    		lw $a2, output_length
    		syscall
file_close:
    		li $v0, 16  # $a0 already has the file descriptor
    		syscall		
		
		
		j end
		
######################################################################

#######################################################################
#                            decompress	               		      #	
#######################################################################
decompress:	lw $t0, ($s5)
		
		la $s1, dict_addr	# ladujemy slownik
		lw $s1, 0($s1)
		sw $0, iter_dict
		
loop_4:		lw $s1, 0($s1)		# wyszukujemy pierwszy znak
		lw $t1, iter_dict
		addi $t1,$t1,1
		sw $t1, iter_dict
		
		bne $t1,$t0, loop_4		
		
		la $a0, 4($s1)		# drukujemy go
		li $v0, 4
		syscall
		
		addi $s5,$s5,4	
		lw $t0, ($s5)	
		beqz $t0, end
		
		lw $t1,dict_size
		bgt $t0,$t1, else
		
		la $s1, dict_addr	# ladujemy slownik
		lw $s1, 0($s1)
		sw $0, iter_dict
		
loop_5:		lw $s1, 0($s1)		# wyszukujemy pierwszy znak
		lw $t1, iter_dict
		addi $t1,$t1,1
		sw $t1, iter_dict
		
		bne $t1,$t0, loop_5		
		
		la $a0, 4($s1)		# drukujemy go
		li $v0, 4
		syscall
else:
		
		
				
#######################################################################		
end:		li $v0, 10
		syscall
		
		
########################################################################
# do debugowania							
		#p drukowanie sloqnika
hop:		la $t1, dict_addr
		lw $t1,0($t1)
		
print_dict:	la $a0,	4($t1) 
		li $v0, 4
		syscall
		
		la $a0,	space 
		li $v0, 4
		syscall
		
		lw $t1,0($t1)
		lw $t2,0($t1)
		beq $t2,0,end
		j print_dict
